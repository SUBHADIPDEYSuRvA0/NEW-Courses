<%- include('partial/header') %>
<style>
  .toast-container {

position: fixed;
top: 20px;
right: 20px;
z-index: 9999;
}
.toast-custom-success {
background-color: #004ffa; /* Bootstrap success green */
color: white;
font-weight: bold;
}
</style>
<div class="container" style=" height: 15vh;">
    </div>
    <% if (message) { %>
      <div class="toast-container">
        <div id="toastMessage" class="toast toast-custom-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="d-flex">
            <div class="toast-body">
              <%= message %>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
        </div>
      </div>
      
    <% } %>
  
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Show toast automatically if message exists
      const toastEl = document.getElementById('toastMessage');
      if (toastEl) {
        const toast = new bootstrap.Toast(toastEl, { delay: 4000 });
        toast.show();
      }
    </script>
<style>
  body {
    background-color: #f7f9fc;
    font-family: 'Segoe UI', sans-serif;
  }

  .course-section {
    padding: 50px 15px;
  }

  .course-title {
    text-align: center;
    margin-bottom: 30px;
    font-size: 2.5rem;
    font-weight: 700;
    color: #3f51b5;
  }

  .search-bar {
    max-width: 400px;
    margin: 0 auto 30px auto;
  }

  .course-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 30px;
  }

  .course-card {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .course-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
  }

  .course-card img {
    width: 100%;
    height: 180px;
    object-fit: cover;
  }

  .course-card-body {
    padding: 20px;
  }

  .course-card h5 {
    font-weight: 600;
    color: #333;
  }

  .course-card p {
    color: #666;
    font-size: 0.95rem;
    margin-bottom: 15px;
  }

  .course-price {
    color: #3f51b5;
    font-weight: 600;
  }

  .enroll-btn {
    background-color: #3f51b5;
    color: white;
    border: none;
    width: 100%;
  }

  .enroll-btn:hover {
    background-color: #303f9f;
  }

  .loading-spinner {
    text-align: center;
    padding: 20px;
  }

  .spinner-border {
    width: 2rem;
    height: 2rem;
    color: #3f51b5;
  }
</style>

<div class="container course-section">
  <h2 class="course-title">Explore Our Tech Courses</h2>
  <div class="search-bar mb-4">
    <input type="text" id="searchInput" class="form-control" placeholder="Search courses...">
  </div>

  <div id="course-container" class="course-grid"></div>
  <div class="loading-spinner" id="loader" style="display: none;">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
  <div id="sentinel" style="height: 1px;"></div>
</div>

<script>
  const courseContainer = document.getElementById('course-container');
  const loader = document.getElementById('loader');
  const searchInput = document.getElementById('searchInput');
  const totalCourses = 100;
  const coursesPerLoad = 10;
  let loadedCourses = 0;
  let loading = false;

  const courseTitles = Array.from({ length: totalCourses }, (_, i) => `Course on Topic ${i + 1}`);

  const generateCourse = (i) => {
    return {
      title: courseTitles[i],
      description: 'Master essential development skills with hands-on learning.',
      img: `/user/assets/images/image.png`,
      price: `â‚¹${(i + 1) * 49}`
    };
  };

  const renderCourses = async () => {
    if (loading) return;
    loading = true;
    loader.style.display = 'block';

    await new Promise(resolve => setTimeout(resolve, 1000));

    const fragment = document.createDocumentFragment();
    for (let i = loadedCourses; i < loadedCourses + coursesPerLoad && i < totalCourses; i++) {
      const course = generateCourse(i);
      const card = document.createElement('div');
      card.className = 'course-card';
      card.setAttribute('data-title', course.title.toLowerCase());
      card.innerHTML = `
        <img src="${course.img}" alt="${course.title}" loading="lazy">
        <div class="course-card-body">
          <h5>${course.title}</h5>
          <p>${course.description}</p>
          <p class="course-price">${course.price}</p>
          <button class="btn enroll-btn">Enroll Now</button>
        </div>
      `;
      fragment.appendChild(card);
    }
    courseContainer.appendChild(fragment);
    loadedCourses += coursesPerLoad;
    loader.style.display = 'none';
    loading = false;
  };

  const observer = new IntersectionObserver((entries) => {
    if (entries[0].isIntersecting && loadedCourses < totalCourses) {
      renderCourses();
    }
  }, {
    rootMargin: '100px'
  });

  observer.observe(document.getElementById('sentinel'));
  renderCourses();

  // AJAX-style search filter
  searchInput.addEventListener('input', () => {
    const query = searchInput.value.toLowerCase();
    const cards = document.querySelectorAll('.course-card');
    cards.forEach(card => {
      const title = card.getAttribute('data-title');
      card.style.display = title.includes(query) ? 'block' : 'none';
    });
  });
</script>

<%- include('partial/footer') %>
